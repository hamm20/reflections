What happens when you initialize a repository? Why do you need to do it?
    
    When you initialize a repo, a .git file is created. This file is needed since it is used to 
    store metadata about the history of the repo. 

How is the staging area different from the working directory and the repository? What value do you 
think it offers? 

    The staging area is where you add files from your working directory to prepare/stage for committing 
    to the repository. It's the intermediary between the working directory/files and repository. The value
    it offers is to probably to offer more flexibility and control.  

How can you use the staging area to make sure you have one commit per logical change?

    All files that belong to the logical change can be added to the staging area. Any file 
    changes that do not belong to the logical change can be removed. Everything can be reviewed in 
    the staging area before committing. 

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help? 

    Branching could help with history organization by seperating existing working code vs experimental code 
    and/or new features. his This would help with clarity and lesson confusion.  Seperate tree for working code  
    and test code/experiemental code. In addition, branching would help with organzing if working with a team. 
    Individuals could each have a separate branch. 
 
How do the diagrams help you visualize the branch structure?

    By having diagrams, it makes it easier to see where branches start and end and how all are related.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

    When you merge both branches, changes for both branches are merge into the master branch. It is ordered 
    by timestamp. The non-master branch will be removed but the commit IDs are still there. The diagram 
    is represented in a way to easily distinguish separate branches and show which brance has access to in 
    it's tree. 

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

    Pros for auto merging, less time used to merge files, reduce human errors, speed
    Cons for auto merging, possible duplicate code, 
    Pros for manual merge, no duplicate code, more thorough check for errors
    Cons for manual merge, time consuming looking over code for duplicates, possible human error,
     
